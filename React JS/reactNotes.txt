Modern JavaScript Bundling     https://reacttraining.com/blog/jsx-the-confusing-parts/#what-is-jsx
--------------------------
Since we're making applications in Front-End JavaScript now, our codebase is much bigger than it used to be. There are many files involved and thus a "build step" is 
needed to bundle them together. Without this step, an application might have 100s or 1000s of files which would need to be downloaded individually.

One of the main roles of a bundler (like Webpack or Rollup) is to safely concatenate the files together to produce one file (or several files that are split up for
application reasons). We get to author in many files that are organized for us to understand, but the end-result are build files that we put on production servers.


During the build process, plugins can be used to augment the code while it's being bundled. The most common plugin paired with React is
Babel -- a JavaScript compiler which allows us to write JavaScript one way and Babel will rewrite it to be another way.

The reason we want Babel to rewrite our JavaScript is so that we can do things like use "FUTURE FEATURES" of JavaScript that browsers don't understand yet. 
Babel will rewrite our code to be compatible with what browsers currently understand. This makes it feel like we're writing future code and 
we don't have to wait for it to be ready in every browser.

In JSX we can use curly braces to inject variables:

const message = 'Hello World'
const myDiv = <div>{message}</div>

Create React App
> npx create-react-app my-first-app
> npm start
> npm install react-router-dom

> npm view react version
> npm install --save-dev @wojtekmaj/enzyme-adapter-react-17
> npm install @testing-library/react react-test-render jest-dom --save-dev
> npm test
> npm test App.test.js

To create key for list items  use UUID  .. It generates unique ids for elements
> npm i uuidv4


Sample Sign-up-page implementation
----------------------------------
Fields in page and details
1) Username 
   -> Textbox
   -> Should be greater than 5 characters
2) Password
   -> Password field
   -> Should have atleast one number
   -> Should have atleast one special character
   -> Length should be greater than 8 characters
3) Confirm Password
   -> textbox
   -> Should match Password
4) Submit Button
----
1) Name the file as SignupPageForm.js
2) Go for Form element, which has  Username,Password , Confirm Password and Submit Button
3) The component function name is SignupPageForm
4) Id of SignupPageForm is signupForm
5) Id of Username field is username
6) Id of Password field is password
7) Id of Confirm Password is confirmpassword
8) Id of button is submit





-------------------------------------------------------------------------------
Getting started with Jest
1) create project with create-react-app
2) Installs react-test-renderer
   > npm install -D react-test-renderer
3) Copy the command below to install the package for DOM testing in a React app using Jest.
  > npm install -D @testing-library
4) Use this command which installs both of them in dev mode
 > npm i --save-dev @testing-library/react react-test-render
5) npm test is same as npm run test

-- To work with snapshots, I ran below two commands to install testing library
 > npm i --save-dev @testing-library/react react-test-render
 > npm install -D @testing-library

-- To skip a test ot testsuite add 'x' to describe/test
xdescribe('......')
xtest('.....')


------
Input and Babel transpilation output

<h1>Hi There</h1>
React.createElement("h1", null, "Hi There");


<h1 color="green">Hi There</h1>
React.createElement("h1", {
  color: "green"
}, "Hi There");


<input type="radio" id="gender" >Male</input>
React.createElement("input", {
  type: "radio",
  id: "gender"
}, "Male");
-----
<table border = "1">
  <tr>
    <td>Hi There</td>
  </tr>
</table>
React.createElement("table", {
  border: "1"
}, React.createElement("tr", null, React.createElement("td", null, "Hi There")));
------
<html>
  <head>
    	<script src = "jQuery.js" />
  </head>
  <body>
  	<table border = "1">
  		<tr>
    		<td>Hi There</td>
  		</tr>
	</table>	
  </body>
</html>
React.createElement("html", null, React.createElement("head", null, React.createElement("script", {
  src: "jQuery.js"
})), React.createElement("body", null, React.createElement("table", {
  border: "1"
}, React.createElement("tr", null, React.createElement("td", null, "Hi There")))));
-------------------------------------------------------------------------------------------------------------------

https://reactjs.org/docs/glossary.html#single-page-application
https://reactjs.org/docs/hooks-overview.html
https://reactjs.org/docs/introducing-jsx.html   (Main contents)
https://reactjs.org/docs/create-a-new-react-app.html








