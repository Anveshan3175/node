SETUP CONTEXT

- With server-side web applications, a web browser must make a request to the server and await a response, in order to complete a task that a user has requested. 
- The wait times can be large if there is batch process triggered for an action in UI
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Current trends in JS

BUT NOW WEB BROWSERS HAVE BECOME POWERFUL.

-  They are able to handle more complicated calculations and client-side frameworks are starting to become more popular
-  The client therefore is responsible for processing and running the code locally.

Applications become faster
 - The round trips have become less
 
 MVVM (Model-View-ViewModel)
  - ADF uses MVC model pattern 
  -  JET uses a different architecture pattern called MVVM
  - MVVM is common in client-side implementations, due to its two-way data binding between the View and ViewModel, 
    meaning that any data changes in the ViewModel are sent to the UI components, and any user inputs from the UI are updated in the ViewModel
    
  - The Model is responsible for accessing the data stores using APIs
  - The View - It is the visual and interactive web page
  - The Model is responsible for holding the data, and the View is responsible for presenting the data. 
    Think of the ViewModel as the intermediate. It exposes the Model data to assist in maintaining the state of the View.
    Lot cleaner code . BUt this is again different topic.

Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PROBLEMS that came up

As javascript began to increase its role in EAs, the JS codebases increased. Many Frameworks came into picture. And to be able to use those frameworks, we use <SCRIPT> tag - the traditional way. The <SCRIPT> tag has been existent since inception of INternet.
  - So With <script> tags, you can drop in your libraries - like jQuery underscore,backbone etc
  - Problem with <script> tags. They tend to pollute the Global scope
  - The browser has all the global variables floating inside  it. If you drop more <script> , the more variables are added. THEY COLLIDE.
  
  
**************************** SHOW DEMO COLLISION

The dependency order needs to be respected
  - For ex: in here - BackgroundJS needs undescoreJS needed to be loaded before it is loaded.That is a dependancy on underscore for background. So you are 
    always loading undescore before Background.
  - Another Ex : if you are working with Jquery plugins, then you need to ensure that Jquery gets loaded before plugins get loaded
  
**************************** SHOW DEMO DEPENDANCIES
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Solutions that came up
 
  Modules are very cool, because they let you encapsulate all sorts of functionality, and expose this functionality to other JavaScript files, as libraries. They let you  create clearly separate and reusable snippets of functionality, each testable on its own.
  
  CommonJS really works well on local server because all the files in the server are local to one another. But it doesnot work  if we use browser.Tthe files are all not
  on local system. We have to make Asyn requests (like to Jquery ) to get files on the other servers - like using CDN. CommonJS load Sysnchrnously but doesn't work Asynchronously.
  
  We will not discuss CommonJS here but Let me show Aysn and Sync loading of files .
  
**************************** SHOW DEMO ASYNC ans SYNC LOADING
  
 So CommonJS doesn't work in browsers  where in files are loaded Asynchronously. As an offshoot, of CommonJS, that emphasizes browser, AMD is developed.
 AMD stands for Async module def.It is spec. AMD takes a lot of what's already in CommonJS and it just adds some additional functionality to help  support some of the
 workflows that are really common  in the browser around the async file loading.
 
 There are script loaders like requireJS and CurlJS and HeadJS that implements AMD. RequireJS is probably one of the best known AMD script loader.
 
 Specs for AMD is hosted on Github. It is really short one and easy to read unlike other W3C spec whch are bit intimidating.
 
 https://auth0.com/blog/javascript-module-systems-showdown/
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  RequireJS
  
  Though we are talking about RequireJS, it is basically, specs from AMD.
  
  define() function -> This is the only  API specification mentioned in the AMD spec.(show in specs). We have define function to define modules - with an optionalID, optional Dependancies,
  and a factory function that gets run and wahtever it returns is what your module exports. So we will go through each one individually.
  -----
  id? -> Unique identifier for the module- which is just like path that you are telling to requireJS where to find  map module.
         But requireJS discourages use of module IDs. That's because , if you need to change this moduleId , say you move your module to a different location,then you need to change this module Id by hand , that can become real pain. So requireJs says, you are developing , don't worry about putting an ID and later on when optimization runs, I will put those IDs. But be aware that there are named modules. 
         
**************************** SHOW DEFINEs FROM OJET APP - appController.js,customer.js  . There are no names for modules. I didn't work on requireJS so much to have an opinion for myself if moduleIds are good or bad. 
 -----
 dependencies? -> You can define optional list of dependancies in an ARRAY and requireJS will go and automatically inject all those dependancies into your module
 
//jQuery  is assigned to $
// d3 is assigned to d3
   define( [‘jQuery’,’d3’], function ( $, d3 )  {
   });
   
  
  In this case, JQuery is going to find JQuery and d3 and pass them to this function - callback function - and inside your module, you can use Jquery and d3.
  How requireJS loads JQuery and d3, we will discuss later. For now, just undestand that, you can define your dependancies and requireJS will go and load them for you.
  
  If you want to know whats going on Behind the Scenes - how does it actually loads the dependancies ? When RequeryJS sees you are asking for jQuery,d3 and some other modules, it goes and turns that into bunch of  <Script> tags in the head of the document.And in doing so, it also grabs the dependacies of the dependancies- like if d3 depends on someother JS, RequireJS goes and grabs it as well. It puts all those dependancies into <SCRIPT> tags and toses them into header of view document, waits for all of then to load and then STARTS RUNNING THESE callback function. So it is full lifecycle ->  Finding all the dependancies, putting them on the page and kicking of the callbacks.
 -----
 factory function
 Finally there is a factory function. This is required property. You need to specify factory function. It is called once for module.If the factory function returns  anything then that object should be assigned  as the exported value for the module.
 
 So as an example, I am defining a module that returns an object. Let us say module name is foo.js and it has property on object - name. Later on , when someone requires a foo module, they are going to get the object and if they access "name" property, they should see it as "FOO". 
 
 So I emphasize that only if return value is there, it is exported. You don't have to necessarily return anything for your module. For example, JQuery Plugins, they don't return anything at all. They just load in JQuery and then add new function to the jQuery object that was loaded in and there is no return value whatsoever. So not everything is going to return a value. Just keep that in mind.
 
 Things you can do with factory function
 -- Return an object - We just went over that. It is simple. name property is ROb. method sayHello of the object. And later on in the application, app.js, we can say, hey, I need that person and requireJS loads it, and then calls the callback function and it runs sayHello(). Straightforward.
 
 -- Return a function - Another thing you can do is return a function. Because functions in Javascript are first class citizens.They are objects as well. So you are pass them around. In this case, we have defined a module call sum.js . It returns a function, which takes 2 numbers and alerts the sum of those 2 numbers. and later on in calculator.js you can say, hey I depend on sum. so sum function gets loaded , and then we call sum(2,2) and it alerts 4. This is useful , if you wnat to make little utility methods that you want to pull into your modules. But another important thing you can do is return constructors.
 
 -- Return a constructor - If you are used to class based languages like java,Phyton and you are using constructors, you can just define a constructor function like in person.js here. Elsewhere, in your application, app.js, you can acquire that function ad say Rob equals new Person and the rob.sayHello()
 
 -- Another thing you can make is create private variable and private functions if you like. In here, we are returning object "count" and they have functions but the functions are defined up here. Only the stuff inside the return is returned. All the guys up here - variable counter, getCounter are private and cannot be accessed directly. 
 
 -----
 There is another part to the AMD specification is require function.  We usually use it to kickoff our application. open
 **************************** SHOW MAIN.JS OJET APP  and show require function
 What require function says is, unless you load these dependencies, don’t execute anything here. Another way of saying this is, the  function is callback function.
 
 So we have require and define.  
 - both require() and define() to load dependencies. Understanding the difference between those two functions is essential to managing dependencies. 
 The require() function is used to run immediate functionalities, 
 while define() is used to define modules for use in multiple locations. 
 
 Define is used at all times  and require to kickoff application. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Precautions
Dependancy order matters - Whatever you mention in the dependacies ARRAY, they should match in arguments of callback function. So in this example , there are 2 dependancies - jQuery and somejQueryPlugin. The return value from jQuery module is mentioned as argument -$ (anything thing can be used) and there is no return value for somejQueryPlugin. Since there is no value to export from somejQueryPlugin, we need not put in anything there or use "undefined". But it is not needed. So for all depenadant modules that don't export any explict value, they can be left out in the arguments of callback function.

- But if “someJqueryPlugin” is mentioned as first dependency ? The requireJS will load all dependancies mentioned. No issue with that. But callback function maps return value of “someJqueryPlugin” to $ and nothing to refer to jQuery. So when you try to do something with $, thinking it points to jQuery, then it will explode. And return value for jQuery is undefined.

-	Mention all dependencies which have return values in the beginning – maintaining ONE TO ONE Match between listed dependencies and arguments to callback function 
-	Mention all dependencies which don’t have return value in the last
--- 
Don’t Mix  Async And Synchronous Code
Another thing you will see is , lot of people will mix synchronous and Asynchronous code. This can be confusing esp when people start migrating from projects that use <SCRIPT> tag  to AMD. If you see this code - index.html. The developer here is thinking he can do something with jQuery,widgetand highcharts. Then he wanted to plugin some HighChartsPlugin to do something interesting. But this is totally broken. 
    This block - require block is totally fine. In the require block, you can wait for things to load and then run the code inside the callback function. 
    So when index.html is loaded, Browser traverses all code, it sees require block and  Browsers make Aysn requests to all libs - jQuery,Widget and HighCharts. 
    - Meanwhile, Browser keeps going down parsing stuff and it finds <SCRIPT> for someHighChartPlugin. It loads immediately/syncronously because it is in <SCRIPT> tag.
    But highChartPlugin has dependancy on highChart which might not be loaded by then becuase of Async nature. So it could potentially blowup the page.
    - And samething for Widget in <SCRIPT> . The Widget might not be in the scope yet because the Asyn call might not be returned yet.
    
    --> HOW can you remedy this ? ??
    Probably, move the widget stuff into require block, so that widget is available when you actioning on it.
    And you can move the highChartplugin into another AMD block , which mentione Highchart as dependancy.
















--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Require.js can't do anything (including load another script) until it is loaded itself.
  
  It is common to use data-main for applications that have only a single entry point, and to put RequireJS' configuration in the module specified in data-main,
  If you do not use data-main, you must provide an entry point after loading RequireJS
